{"version":3,"sources":["../vendor/fauxterm.js","../src/index.js"],"names":["fauxTerm","config","getLeader","cwd","renderTerm","ob","termBuffer","lineBuffer","term","innerHTML","scrollTop","scrollHeight","writeToBuffer","str","length","maxBufferLength","diff","substr","renderStdOut","i","max","tags","start","RegExp","end","replace","clear","argv","argc","isCoreCommand","line","coreCmds","hasOwnProperty","coreCommand","cmd","processLine","stdout","split","processCommand","addLineToHistory","commandHistory","unshift","currentCommandIndex","maxCommandHistory","console","log","splice","isInputKey","keyCode","indexOf","toggleCommandHistory","direction","newIndex","acceptInput","e","preventDefault","fauxInput","value","ctrlKey","key","el","document","getElementById","initialMessage","initialLine","autoFocus","classList","add","createElement","className","body","appendChild","addEventListener","focus","remove","window","im","innerText","email","buffer","location","href"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * fauxTerm\n * A lightweight, faux, terminal-like emulator\n * Give the impression of a terminal interface without running any real shell.\n * @package fauxterm\n * @version 0.0.1\n * @author https://github.com/isdampe\n * @license MIT\n */\nfunction fauxTerm(config) {\n\n\tvar term = config.el || document.getElementById('term');\n\tvar termBuffer = config.initialMessage || '';\n\tvar lineBuffer = config.initialLine || '';\n\tvar cwd = config.cwd || \"~/\";\n\tvar tags = config.tags || ['red', 'blue', 'white', 'bold'];\n\tvar processCommand = config.cmd || false;\n\tvar maxBufferLength = config.maxBufferLength || 8192;\n\tvar commandHistory = [];\n\tvar currentCommandIndex = -1;\n\tvar maxCommandHistory = config.maxCommandHistory || 100;\n\tvar autoFocus = config.autoFocus || false;\n\tvar fauxInput;\n\tvar coreCmds = {\n\t\t\"clear\": clear\n\t};\n\n\tfunction init() {\n\n\t\tterm.classList.add('fauxterm');\n\t\tfauxInput = document.createElement('textarea');\n\t\tfauxInput.className = \"fauxterm-input\";\n\t\tdocument.body.appendChild(fauxInput);\n\n\t\tterm.addEventListener('click', function(e){\n\t\t\tfauxInput.focus();\n\t\t\tterm.classList.add('fauxterm-focus');\n\t\t});\n\t\tfauxInput.addEventListener('keydown', acceptInput);\n\t\tfauxInput.addEventListener('blur', function(e){\n\t\t\tterm.classList.remove('fauxterm-focus');\n\t\t});\n\n\t\tif ( autoFocus ) {\n\t\t\tfauxInput.focus();\n\t\t\tterm.classList.add('fauxterm-focus');\n\t\t}\n\n\t\trenderTerm();\n\n\t}\n\n\tfunction getLeader() {\n\t\treturn cwd + \"$ \";\n\t}\n\n\tfunction renderTerm() {\n\t\tvar bell = '<span class=\"fauxterm-bell\"></span>';\n\t\tvar ob = termBuffer + getLeader() + lineBuffer;\n\t\tterm.innerHTML = ob;\n\t\tterm.innerHTML += bell;\n\t\tterm.scrollTop = term.scrollHeight;\n\t}\n\n\tfunction writeToBuffer(str) {\n\t\ttermBuffer += str;\n\n\t\t//Stop the buffer getting massive.\n\t\tif ( termBuffer.length > maxBufferLength ) {\n\t\t\tvar diff = termBuffer.length - maxBufferLength;\n\t\t\ttermBuffer = termBuffer.substr(diff);\n\t\t}\n\n\t}\n\n\tfunction renderStdOut(str) {\n\t\tvar i = 0, max = tags.length;\n\t\tfor ( i; i<max; i++ ) {\n\t\t\tvar start = new RegExp('{' + tags[i] + '}', 'g');\n\t\t\tvar end = new RegExp('{/' + tags[i] + '}', 'g');\n\t\t\tstr = str.replace(start, '<span class=\"' + tags[i] + '\">');\n\t\t\tstr = str.replace(end, '</span>');\n\t\t}\n\t\treturn str;\n\t}\n\n\tfunction clear(argv, argc) {\n\t\ttermBuffer = \"\";\n\t\treturn \"\";\n\t}\n\n\tfunction isCoreCommand(line) {\n\t\tif ( coreCmds.hasOwnProperty(line) ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction coreCommand(argv, argc) {\n\n\t\tvar cmd = argv[0];\n\t\treturn coreCmds[cmd](argv, argc);\n\n\t}\n\n\tfunction processLine() {\n\n\t\t//Dispatch command\n\t\tvar stdout, line = lineBuffer, argv = line.split(\" \"), argc = argv.length;\n\n\t\tvar cmd = argv[0];\n\n\t\tlineBuffer += \"\\n\";\n\t\twriteToBuffer( getLeader() + lineBuffer );\n\t\tlineBuffer = \"\";\n\n\t\t//If it's not a blank line.\n\t\tif ( cmd !== \"\" ) {\n\n\t\t\t//If the command is not registered by the core.\n\t\t\tif ( !isCoreCommand(cmd) ) {\n\n\t\t\t\t//User registered command\n\t\t\t\tif ( processCommand ) {\n\t\t\t\t\tstdout = processCommand(argv,argc);\n\t\t\t\t} else {\n\t\t\t\t\tstdout = \"{white}{bold}\" + cmd + \"{/bold}{/white}: command not found\\n\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//Execute a core command\n\t\t\t\tstdout = coreCommand(argv,argc);\n\t\t\t}\n\n\t\t\t//If an actual command happened.\n\t\t\tif ( stdout === false ) {\n\t\t\t\tstdout = \"{white}{bold}\" + cmd + \"{/bold}{/white}: command not found\\n\";\n\t\t\t}\n\n\t\t\tstdout = renderStdOut(stdout);\n\t\t\twriteToBuffer(stdout);\n\n\t\t\taddLineToHistory(line);\n\n\t\t}\n\n\t\trenderTerm();\n\t}\n\n\tfunction addLineToHistory(line) {\n\t\tcommandHistory.unshift( line );\n\t\tcurrentCommandIndex = -1;\n\t\tif ( commandHistory.length > maxCommandHistory ) {\n\t\t\tconsole.log('reducing command history size');\n\t\t\tconsole.log(commandHistory.length);\n\t\t\tvar diff = commandHistory.length - maxCommandHistory;\n\t\t\tcommandHistory.splice(commandHistory.length -1, diff);\n\t\t\tconsole.log(commandHistory.length);\n\t\t}\n\t}\n\n\tfunction isInputKey(keyCode) {\n\t\tvar inputKeyMap = [32,190,192,189,187,220,221,219,222,186,188,191];\n\t\tif ( inputKeyMap.indexOf(keyCode) > -1 ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction toggleCommandHistory(direction) {\n\n\t\tvar max = commandHistory.length -1;\n\t\tvar newIndex = currentCommandIndex + direction;\n\n\t\tif ( newIndex < -1 ) newIndex = -1;\n\t\tif ( newIndex >= commandHistory.length) newIndex = commandHistory.length -1;\n\n\t\tif ( newIndex !== currentCommandIndex ) {\n\t\t\tcurrentCommandIndex = newIndex;\n\t\t}\n\n\t\tif ( newIndex > -1 ) {\n\t\t\t//Change line to something from history.\n\t\t\tlineBuffer = commandHistory[newIndex];\n\t\t} else {\n\t\t\t//Blank line...\n\t\t\tlineBuffer = \"\";\n\t\t}\n\n\n\t}\n\n\tfunction acceptInput(e) {\n\t\te.preventDefault();\n\t\tfauxInput.value = \"\";\n\n\t\tif ( e.keyCode >= 48 && e.keyCode <= 90 || isInputKey(e.keyCode) ) {\n\t\t\tif (! e.ctrlKey ) {\n\t\t\t\t//Character input\n\t\t\t\tlineBuffer += e.key;\n\t\t\t} else {\n\t\t\t\t//Hot key input? I.e Ctrl+C\n\t\t\t}\n\t\t} else if ( e.keyCode === 13 ) {\n\t\t\tprocessLine();\n\t\t} else if ( e.keyCode === 9 ) {\n\t\t\tlineBuffer += \"\\t\";\n\t\t} else if ( e.keyCode === 38 ) {\n\t\t\ttoggleCommandHistory(1);\n\t\t} else if ( e.keyCode === 40 ) {\n\t\t\ttoggleCommandHistory(-1);\n\t\t}\n\t\telse if ( e.key === \"Backspace\" ) {\n\t\t\tlineBuffer = lineBuffer.substr(0, lineBuffer.length -1);\n\t\t}\n\n\t\trenderTerm();\n\t}\n\n\tinit();\n\n}\n","(function(window){\n\tvar fauxTerm = window.fauxTerm;\n\n\tvar im = document.getElementById('content').innerText;\n\tvar email = 'rdoug' + '@' + 'deakin.edu.au'; //stop robots\n\tim = im + '<a href=\"mailto:' + email + '\">' + email + '</a>' + \"\\n\\n\";\n\n\tvar help = \"{bold}List of known commands{/bold}:\\ncat: print home page content to terminal\\nclear: clear the terminal screen\\nmail: send an email to site owner\\nsoftware: print list of software links to terminal\";\n\n\tvar myTerm = new fauxTerm({\n\t\tel: document.getElementById('fauxterm'),\n\t\tautoFocus: true,\n\t\tinitialMessage: '~/rdoug$ cat' + \"\\n\" + im,\n\t\tcwd: \"~/rdoug\",\n\t\ttags: ['bold'],\n\t\tmaxBufferLength: 8192,\n\t\tmaxCommandHistory: 50,\n\t\tcmd: function(argv, argc) {\n\n\t\t\tvar buffer;\n\n\t\t\tswitch (argv[0]) {\n\t\t\t\tcase \"cat\":\n\t\t\t\t\tbuffer = im;\n\t\t\t\t\treturn buffer;\n\t\t\t\tbreak;\n\t\t\t\tcase \"mail\":\n\t\t\t\t\twindow.location.href = 'mailto:' + email;\n\t\t\t\t\treturn \"\";\n\t\t\t\tbreak;\n\t\t\t\tcase \"software\":\n\t\t\t\t\treturn '<a target=\"_blank\" href=\"https://github.com/isdampe/fauxTerm\">fauxTerm.js - Fake web terminal emulator, used on this website.</a>' + \"\\n\";\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbuffer = \"{bold}\" + argv[0] + \"{/bold}: command not found\\n\\n\";\n\t\t\tbuffer = buffer + help + \"\\n\\n\";\n\t\t\treturn buffer;\n\n\t\t}\n\t});\n\n})(window);\n"]}